{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Create ECS cluster",
  "Parameters" : {
    "KeyName" : {
      "Description" : "Amazon EC2 key name",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "ECSInstanceNumber": {
      "Description" : "ECS cluster instances number",
      "Type" : "Number",
      "Default" : "2"
    },
    "ECSSharedMountpoint": {
      "Description" : "ECS cluster shared mountpoint",
      "Type" : "String",
      "Default" : "/www"
    }
  },
  "Resources" : {
    "VPC": {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock": "192.168.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "InternetGateway": {
      "Type" : "AWS::EC2::InternetGateway"
    },
    "GatewayToInternet" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "SubnetRouteTableAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "SubnetId" : { "Ref" : "Subnet" }
      }
    },
    "InternetGatewayRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "RouteTableId" : { "Ref" : "RouteTable" },
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "Subnet": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "CidrBlock" : "192.168.0.0/24",
        "MapPublicIpOnLaunch" : "true",
        "VpcId" : { "Ref" : "VPC"}
      }
    },
    "InstanceSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow SSH and HTTP",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "CidrIp" : "0.0.0.0/0",
            "FromPort" : "22",
            "ToPort" : "22"
          },
          {
            "IpProtocol" : "tcp",
            "CidrIp" : "0.0.0.0/0",
            "FromPort" : "80",
            "ToPort" : "80"
          }
        ]
      }
    },
    "MountTargetSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow NFS",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "CidrIp" : "0.0.0.0/0",
            "FromPort" : "2049",
            "ToPort" : "2049"
          }
        ]
      }
    },
    "Filesystem" : {
      "Type" : "AWS::EFS::FileSystem",
      "Properties" : {
        "FileSystemTags" : [
          {
            "Key" : "Name",
            "Value" : "ECSSharedMountpoint"
          }
        ]
      }
    },
    "MountTarget" : {
      "Type" : "AWS::EFS::MountTarget",
      "Properties" : {
        "FileSystemId" : { "Ref" : "Filesystem" },
        "SubnetId" : { "Ref" : "Subnet" },
        "SecurityGroups": [
          { "Ref" : "MountTargetSecurityGroup" }
        ]
      }
    },
    "LaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "ImageId" : "ami-5ec1673e",
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [
          { "Ref" : "InstanceSecurityGroup" }
        ],
        "IamInstanceProfile" : { "Ref" : "ECSInstanceProfile" },
        "UserData" : {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum -y update\n",
                "echo ECS_CLUSTER=", { "Ref" : "ECSCluster" }, ">>/etc/ecs/ecs.config\n",
                "yum -y install docker nfs-utils ecs-init\n",
                "service docker start\n",
                "chkconfig docker on\n",
                "start ecs",
                "mkdir -p ",
                {
                  "Ref": "ECSSharedMountpoint"
                },
                "\n",
                "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ",
                {
                  "Ref": "Filesystem"
                },
                ".efs.",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com:/ ",
                {
                  "Ref": "ECSSharedMountpoint"
                },
                "\n",
                "chown ec2-user:ec2-user ",
                {
                  "Ref": "ECSSharedMountpoint"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "UpdatePolicy" : {
        "AutoScalingReplacingUpdate" : {
          "WillReplace" : "true"
        }
      }
    },
    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : [ "GatewayToInternet", "MountTarget", "ECSCluster" ],
      "Properties" : {
        "DesiredCapacity" : { "Ref" : "ECSInstanceNumber" },
        "MinSize" : "1",
        "MaxSize" : { "Ref" : "ECSInstanceNumber" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "LoadBalancerNames" : [ { "Ref" : "LoadBalancer" } ],
        "VPCZoneIdentifier" : [ { "Ref": "Subnet" } ]
      }
    },
    "LoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Listeners" : [
          {
            "InstancePort" : "80",
            "InstanceProtocol" : "TCP",
            "LoadBalancerPort" : "80",
            "Protocol" : "TCP"
          }
        ],
        "LoadBalancerName" : "ecs-lb",
        "Subnets" : [
          { "Ref" : "Subnet" }
        ]
      }
    },
    "ECSCluster" : {
      "Type" : "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : "ECSCluster"
      }
    },
    "ECSInstanceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/",
        "Policies" : [
          {
            "PolicyName" : "ECSInstanceRole",
            "PolicyDocument" : {
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource" : "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ECSServiceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "ecs.amazonaws.com"
                ]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/",
        "Policies" : [
          {
            "PolicyName" : "ECSServiceRole",
            "PolicyDocument" : {
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource" : "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ECSOperatorRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "ec2.amazonaws.com"
                ]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/",
        "Policies" : [
          {
            "PolicyName" : "ECSOperatorRole",
            "PolicyDocument" : {
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "ecr:GetAuthorizationToken",
			        "ecr:BatchCheckLayerAvailability",
			        "ecr:GetDownloadUrlForLayer",
			        "ecr:GetRepositoryPolicy",
			        "ecr:DescribeRepositories",
			        "ecr:ListImages",
                    "ecr:DescribeImages",
			        "ecr:BatchGetImage",
			        "ecr:InitiateLayerUpload",
			        "ecr:UploadLayerPart",
                    "ecr:CompleteLayerUpload",
			        "ecr:PutImage"
                  ],
                  "Resource" : "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ECSInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "ECSInstanceRole" } ]
      }
    },
    "ECSSampleRepository" : {
      "Type" : "AWS::ECR::Repository",
      "Properties" : {
        "RepositoryName" : "sample-repository"
      }
    }
  },
  "Outputs" : {
    "LoadBalancerURL" : {
      "Description" : "Show load balancer URL",
      "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ] } ] ] }
    }
  }
}